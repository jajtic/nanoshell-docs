{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to the Nanoshell docs. Here, you'll be able learn about Nanoshell, understand how things work and start making your own add-ons as well!</p> <p>We hope you'll find the Nanoshell documentation useful.</p> <p>Note</p> <p>The Nanoshell documentation is still being written. We'll be updating it frequently as Nanoshell improves over time.</p> <p>If you've got any ideas on how to improve the documentation, or if you found any issues with it, please reach us on our Discord server!</p>"},{"location":"changelog/","title":"Nanoshell Changelog","text":"<p>All notable changes to nanoshell will be documented here.</p> <p>The format is based on Keep a Changelog.</p>"},{"location":"changelog/#017-2024-08-28","title":"[0.1.7] - 2024-08-28","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>added <code>linuxDistroName</code> to the nanoshell library</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>removed <code>systemScreenResolution</code> from the nanoshell library</li> </ul>"},{"location":"changelog/#016-2024-08-12","title":"[0.1.6] - 2024-08-12","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>added <code>systemScreenResolution</code> to the nanoshell library</li> </ul>"},{"location":"changelog/#015-2024-08-08","title":"[0.1.5] - 2024-08-08","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>nanoshell variables have been moved to the new nanoshell library (<code>nanoshell_lib-base.py</code>, <code>nanoshell_lib.py</code>)<ul> <li>includes: <code>versionStr</code>, <code>systemPlatform</code>, <code>addonCount</code>, <code>addonScriptCount</code>, <code>addonList</code></li> <li><code>nanoshell_lib.py</code> is dynamically written by <code>run.py</code></li> </ul> </li> </ul>"},{"location":"changelog/#014-2024-07-22","title":"[0.1.4] - 2024-07-22","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>simplified <code>platformWarning()</code> in <code>nanoshell-base.py</code></li> </ul>"},{"location":"changelog/#013-2024-07-22","title":"[0.1.3] - 2024-07-22","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>\"Command not found\" message when unknown command is entered</li> <li>added <code>bright</code> to <code>coloramasetup.py</code></li> <li><code>run.py</code> now launches nanoshell.py using <code>python nanoshell.py</code> or <code>python3 nanoshell.py</code>, depending on the platform.</li> <li>user preferences such as the accent color are now stored in <code>config/preferences.json</code>, default preferences in <code>config/preferences_default.json</code></li> <li>base file <code>coloramasetup-base.py</code></li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>post-load message was changed from <code>Finished, executing Nanoshell...</code> to <code>Finished, starting Nanoshell...</code></li> <li><code>run.py</code> now dynamically writes <code>coloramasetup.py</code> based on <code>preferences.json</code> (accentColor)</li> <li>phrased the platform warning a bit differently</li> <li><code>\"darwin\"</code> is now a possible value as the system platform</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li><code>run.py</code> now ignores non-directory files in addons folder to prevent any possible issues</li> </ul>"},{"location":"changelog/#012-2023-12-19","title":"[0.1.2] - 2023-12-19","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li><code>run.py</code> now checks addons' platform key</li> <li>platform warning (<code>nanoshell-base.py</code>) - warns if addon isn't supported on client platform</li> </ul>"},{"location":"changelog/#changes","title":"Changes","text":"<ul> <li>addon JSONs now require a platform key</li> <li>system platform is now checked in <code>run.py</code> (instead of <code>nanoshell-base.py</code>) and stored into variable system_platform in <code>nanoshell-base.py</code></li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li><code>\"java\"</code> is no longer a possible value as the system platform</li> </ul>"},{"location":"changelog/#011-2023-08-21","title":"[0.1.1] - 2023-08-21","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>platform checking in <code>nanoshell-base.py</code> (win/linux/java/unknown)</li> <li>added <code>light_green</code> to <code>coloramasetup.py</code></li> </ul>"},{"location":"changelog/#010-2023-08-12","title":"[0.1.0] - 2023-08-12","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li><code>coloramasetup.py</code> - simple library with colors</li> <li>more verbose messages in run.py</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>nanoshell version is now stored in a variable versionStr in nanoshell-base.py</li> </ul>"},{"location":"changelog/#001-2023-06-30","title":"[0.0.1] - 2023-06-30","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Working nanoshell base and essential scripts</li> </ul>"},{"location":"installing_nanoshell/","title":"Installing Nanoshell","text":""},{"location":"installing_nanoshell/#system-requirements","title":"System requirements","text":""},{"location":"installing_nanoshell/#operating-system","title":"Operating system","text":"<p>Nanoshell supports the following operating systems:</p> <ul> <li>Windows - Windows 10 or later only. (The Windows Terminal is recommended for the best experience)</li> <li>Linux - Linux is supported</li> </ul> <p>At the moment, Nanoshell works on macOS, and it is supported - feel free to open issues on GitHub if you find any!</p>"},{"location":"installing_nanoshell/#python","title":"Python","text":"<ul> <li>Python 3.10 or later is required. (The newest version is recommended)</li> </ul>"},{"location":"installing_nanoshell/#how-to-install-nanoshell","title":"How to install Nanoshell","text":"<p>The installation process is very simple and straightforward.</p> <ol> <li>Go to Nanoshell's GitHub and download the repository as a zip (you can also clone it using your terminal)</li> <li>Extract the zip where you'd like to have Nanoshell installed</li> <li>You're done - run the <code>run.py</code> file to start Nanoshell</li> </ol>"},{"location":"installing_uninstalling_addons/","title":"Installing and uninstalling addons","text":"<p>Addons are an essential part of nanoshell - they give you new commands and functions to use to improve your experience. It is very simple to both install and uninstall addons.</p>"},{"location":"installing_uninstalling_addons/#installing-addons","title":"Installing addons","text":""},{"location":"installing_uninstalling_addons/#method-1-using-the-addon-installer","title":"Method 1 - Using the Addon installer","text":"<p>The simplest way of installing addons is via the Addon installer, which is a part of the built-in addonManagement addon.</p> <p>To install an addon, simply run the following command in your nanoshell instance: <pre><code>addons install\n</code></pre></p> <p>This will list all available addons from the repository. All you have to do is write the name of the addon you'd like to install, and press enter. The addon will install automatically.</p> <p>Tip</p> <p>In case you already know the name of the addon you wish to install, you can specify it in the command and it will be installed immediately. <pre><code>addons install addonName\n</code></pre></p> <p>Before you start using the new commands from your addon(s), you have to reload your nanoshell instance: <pre><code>reload\n</code></pre></p> <p>After this, your newly installed addon(s) will be ready for use.</p>"},{"location":"installing_uninstalling_addons/#method-2-manually-installing-addons","title":"Method 2 - Manually installing addons","text":"<p>In case you're unable to use the built-in Addon installer, you can manually install addons.</p> <p>To do this, download the official addon repository as a zip file. After you've downloaded it, extract it to a folder.</p> <p>In the extracted folder, you'll be able to find many directories: <pre><code>nanoshell-addons/\n  \u251c\u2500\u2500 Calculator\n  \u251c\u2500\u2500 Disklist\n  \u251c\u2500\u2500 ...\n</code></pre></p> <p>Each directory represents an addon in the repository. Find the one you wish to install and cut or copy that directory. Paste it to your nanoshell instance's addons folder:</p> <p><pre><code>~/addons/\n    \u251c\u2500\u2500 newlyInstalledAddon/\n</code></pre> ~ represents the root of your nanoshell instance</p> <p>Warning</p> <p>While you can install any addon you find on the web using this method, it is recommended to only install addons from the official repository to avoid security risks.</p> <p>Installing unknown addons from the web can be dangerous as they can contain malicious code.</p> <p>After you've copied the addon into the right place, you can delete the repository zip as well as the extracted folder.</p> <p>You can now launch nanoshell and use new commands from the addon you've installed.</p> <p>Note</p> <p>If you did this while you had a nanoshell instance running, you have to reload it before you can use the new commands: <pre><code>reload\n</code></pre></p>"},{"location":"installing_uninstalling_addons/#uninstalling-addons","title":"Uninstalling addons","text":""},{"location":"installing_uninstalling_addons/#method-1-using-the-addon-uninstaller","title":"Method 1 - Using the Addon uninstaller","text":"<p>Just like the Addon installer, the Addon uninstaller is also a part of the built-in addonManagement addon.</p> <p>To uninstall an addon, simply run the following command in your nanoshell instance: <pre><code>addons uninstall\n</code></pre></p> <p>This will list all installed addons. All you have to do is write the name of the addon you'd like to uninstall, and press enter. The addon will uninstall automatically.</p> <p>Tip</p> <p>In case you already know the name of the addon you wish to uninstall, you can specify it in the command and it will be uninstalled immediately. <pre><code>addons uninstall addonName\n</code></pre></p> <p>It is recommended to reload your nanoshell instance after uninstalling addons to avoid any unexpected issues: <pre><code>reload\n</code></pre></p>"},{"location":"installing_uninstalling_addons/#method-2-manually-uninstalling-addons","title":"Method 2 - Manually uninstalling addons","text":"<p>In case you're unable to use the built-in Addon uninstaller, you can manually uninstall addons.</p> <p>To do this, navigate to your nanoshell instance's addons folder:</p> <p><pre><code>~/addons/\n    \u251c\u2500\u2500 firstAddon/\n    \u251c\u2500\u2500 secondAddon/\n    \u251c\u2500\u2500 ...\n</code></pre> ~ represents the root of your nanoshell instance</p> <p>Find the folder that matches the name of the addon you wish to uninstall. Delete that folder. The addon will now be uninstalled.</p> <p>Note</p> <p>If you did this while you had a nanoshell instance running, it is recommended that you reload it to avoid unexpected issues: <pre><code>reload\n</code></pre></p>"},{"location":"Creating%20addons%20for%20Nanoshell/essentials/","title":"Creating addons","text":"<p>This guide will walk you through the process of creating your own addon, covering all necessary details to get your addon up and running. We'll go through the structure, the JSON configuration and the Python code, to help you understand how everything works.</p>"},{"location":"Creating%20addons%20for%20Nanoshell/essentials/#addon-structure","title":"Addon Structure","text":"<p>Each addon in nanoshell consists of a JSON configuration file and one or more Python files. The structure typically looks like this, with <code>~</code> representing the cloned nanoshell directory:</p> <pre><code>~/addons/\n    \u251c\u2500\u2500 greet/\n    \u2502   \u251c\u2500\u2500 greet.json\n    \u2502   \u2514\u2500\u2500 main.py\n</code></pre>"},{"location":"Creating%20addons%20for%20Nanoshell/essentials/#directory-and-file-naming","title":"Directory and File Naming","text":"<ul> <li>Directory Name: Should be the name of your addon.</li> <li>JSON File: It's good practice to name the JSON file the same as the addon directory.</li> <li>Python Files: Can be named anything, but it\u2019s a good practice to have a <code>main.py</code> as the entry point.</li> </ul>"},{"location":"Creating%20addons%20for%20Nanoshell/essentials/#creating-the-json-configuration","title":"Creating the JSON Configuration","text":"<p>The JSON file contains metadata and configuration information about your addon. Here is an example and a detailed breakdown of each field:</p>"},{"location":"Creating%20addons%20for%20Nanoshell/essentials/#example-json","title":"Example JSON","text":"greet.json<pre><code>{\n    \"name\": \"Greet\",\n    \"author\": \"YourName\",\n    \"description\": \"A simple addon to greet the user.\",\n    \"addonVersion\": \"1.0.0\",\n    \"triggerCmd\": \"greet\",\n    \"initFoo\": \"greetUser\",\n    \"platform\": \"all\",\n    \"imports\": [\n        [\"addons.greet.main\", \"greetUser\"]\n    ]\n}\n</code></pre>"},{"location":"Creating%20addons%20for%20Nanoshell/essentials/#fields-explained","title":"Fields Explained","text":"<ul> <li>name: The name of your addon. This is how it will be identified.</li> <li>author: Your name or the name of the addon author. This is for attribution.</li> <li>description: A short description of what your addon does. This helps users understand the functionality of your addon.</li> <li>addonVersion: The version of your addon. It is essential that you follow semantic versioning (e.g., <code>1.0.0</code>) - this is so your addons can be updated easily through the built-in addonManagement tools.</li> <li>triggerCmd: The command users will type in nanoshell to invoke your addon. This should be unique to avoid conflicts with other addons.</li> <li>initFoo: The main function in your addon that will be called when the <code>triggerCmd</code> is executed. This function must be defined in your Python code.</li> <li>platform: Specifies the platforms your addon supports. It can be one of the following: <ul> <li><code>\"all\"</code>: Works on all operating systems.</li> <li><code>\"win\"</code>: Works only on Windows.</li> <li><code>\"linux\"</code>: Works only on Linux.</li> <li><code>\"darwin\"</code>: Works only on macOS.</li> </ul> </li> <li> <p>imports: A list of lists, where each sublist specifies:</p> <ul> <li>The module path to your Python file.</li> <li>The function name to import.</li> </ul> <p>In this example, <code>\"addons.greet.main\"</code> refers to the <code>main.py</code> file within the <code>greet</code> directory, and <code>\"greetUser\"</code> is the function to import from that file.</p> </li> </ul>"},{"location":"Creating%20addons%20for%20Nanoshell/essentials/#writing-the-python-code","title":"Writing the Python Code","text":"<p>The main Python file contains the logic for your addon. Here is an example of a simple addon:</p> main.py<pre><code>def greetUser(prompt):\n    parts = prompt.split()\n    if len(parts) &gt; 1:\n        name = \" \".join(parts[1:])\n        print(f\"Hello, {name}!\")\n    else:\n        print(\"Hello! Please provide your name after the 'greet' command.\")\n</code></pre>"},{"location":"Creating%20addons%20for%20Nanoshell/essentials/#main-function","title":"Main Function","text":"<ul> <li>The main function specified in the JSON (<code>initFoo</code>) must take at least one argument, typically named <code>prompt</code>.</li> <li>The <code>prompt</code> argument contains the entire user input, allowing you to parse and handle command options.</li> </ul>"},{"location":"Creating%20addons%20for%20Nanoshell/essentials/#understanding-the-prompt-argument","title":"Understanding the <code>prompt</code> Argument","text":"<p>The <code>prompt</code> argument is a string that contains the entire user input. For example, if the user types <code>greet John Doe</code>, the <code>prompt</code> argument will be <code>greet John Doe</code>.</p> <p>You can use string manipulation to parse the command options. Here is an example:</p> main.py<pre><code>def greetUser(prompt):\n    parts = prompt.split()\n    command = parts[0]   # This will be 'greet'\n    options = parts[1:]  # This will be ['John', 'Doe']\n\n    print(f\"Command: {command}\")\n    print(f\"Options: {options}\")\n\n    if options:\n        name = \" \".join(options)\n        print(f\"Hello, {name}!\")\n    else:\n        print(\"Hello! Please provide your name after the 'greet' command.\")\n</code></pre>"},{"location":"Creating%20addons%20for%20Nanoshell/essentials/#testing-your-addon","title":"Testing Your Addon","text":"<ol> <li>Place Your Addon: Put your addon directory inside the <code>~/addons</code> directory.</li> <li>Run Nanoshell: Start nanoshell by running <code>python run.py</code> or <code>python3 run.py</code> depending on your platform.</li> <li>Invoke Your Addon: Type the trigger command you specified in your JSON to test your addon. For example, <code>greet John Doe</code>.</li> </ol>"},{"location":"Creating%20addons%20for%20Nanoshell/essentials/#publishing-your-addon","title":"Publishing Your Addon","text":"<ol> <li>Prepare Files: Ensure your JSON and Python files are correctly formatted and contain all necessary information, and that the addon is functioning like expected.</li> <li>Submit a Pull Request:</li> <li>Fork the official <code>nanoshell-addons</code> repository.</li> <li>Add your addon directory to your fork of the repository. The directory should contain your JSON and Python files.</li> <li>Commit your changes and push them to your fork.</li> <li>Create a pull request (PR) from your fork to the <code>nanoshell-addons</code> repository. Provide a detailed description of your addon in the PR.</li> <li>Security Verification: The nanoshell contributors will review your addon for security and functionality.</li> <li>Approval and Availability: Once your addon passes the review, it will be merged into the <code>nanoshell-addons</code> repository and become available for everyone through the nanoshell addon installer.</li> </ol> <p>This guide should provide you with all the necessary information to create, test, and publish your own addons for nanoshell. If you have any questions or need further assistance, feel free to reach out to the nanoshell community on Discord. Happy coding!</p>"},{"location":"Creating%20addons%20for%20Nanoshell/using_coloramasetup/","title":"Using coloramasetup","text":"<p>This guide will help you understand how to use the <code>coloramasetup.py</code> library in your Nanoshell addons. This library provides utilities that help your addons maintain consistency with the overall user experience.</p> <p>It is highly recommended that you have read the Creating addons guide before continuing with this guide.</p>"},{"location":"Creating%20addons%20for%20Nanoshell/using_coloramasetup/#brief-summary","title":"Brief Summary","text":"<p>Coloramasetup (<code>bin/coloramasetup.py</code>) provides color variables, including a customizable accent color, to ensure that addons adhere to the user\u2019s color preferences.</p>"},{"location":"Creating%20addons%20for%20Nanoshell/using_coloramasetup/#importing-the-library","title":"Importing the Library","text":"<p>To use the functionalities provided by Coloramasetup, you'll need to import them into your addon scripts.</p> <p>Access the color variables from <code>coloramasetup.py</code> by importing them as follows:</p> <pre><code>from bin.coloramasetup import a as accentColor, r as resetColor\n</code></pre> <p>By importing these libraries, you can now use the provided variables and colors in your addon to create a more integrated and user-friendly experience.</p> <p>Tip</p> <p>It is a good practice to only import the variables you need from the library instead of importing all of them, most of which you won't use anyway.</p>"},{"location":"Creating%20addons%20for%20Nanoshell/using_coloramasetup/#coloramasetup-coloramasetuppy","title":"Coloramasetup (<code>coloramasetup.py</code>)","text":"<p>The <code>coloramasetup.py</code> file, located in the <code>bin/</code> directory, provides several color variables that can be used to style text in your addons. This includes a user-configurable accent color, which ensures consistency with the user's preferences.</p>"},{"location":"Creating%20addons%20for%20Nanoshell/using_coloramasetup/#available-colors","title":"Available Colors","text":"<ul> <li><code>white</code></li> <li><code>dim</code></li> <li><code>bright</code></li> <li><code>green</code></li> <li><code>light_green</code></li> <li><code>red</code></li> <li><code>r</code>: Resets the text color to the default terminal color.</li> <li><code>a</code>: The user-configurable accent color.</li> </ul>"},{"location":"Creating%20addons%20for%20Nanoshell/using_coloramasetup/#example-usage","title":"Example Usage","text":"<pre><code>from bin.coloramasetup import a as accentColor, r as resetColor\n\ndef addonMain(prompt):\n    print(f\"{accentColor}This text will be in the accent color.{resetColor} And this text will be reset to the default color.\")\n</code></pre>"},{"location":"Creating%20addons%20for%20Nanoshell/using_coloramasetup/#best-practices","title":"Best Practices","text":"<ul> <li>Color Consistency: Use the colors from <code>coloramasetup.py</code> to ensure that your addon aligns with the user\u2019s color preferences. This will create a consistent and cohesive user experience across all addons.</li> </ul>"},{"location":"Creating%20addons%20for%20Nanoshell/using_coloramasetup/#updating-and-reloading","title":"Updating and Reloading","text":"<p>Remember that Coloramasetup is updated only at startup or when Nanoshell is reloaded using the <code>reload</code> command. If a user changes the accent color for example, they will be prompted to reload Nanoshell to apply these changes.</p>"},{"location":"Creating%20addons%20for%20Nanoshell/using_nslib/","title":"Using the Nanoshell Library","text":"<p>This guide will help you understand how to use the <code>nanoshell_lib.py</code> library in your Nanoshell addons. This library provides essential information and utilities that help your addons function better.</p> <p>It is highly recommended that you have read the Creating addons guide before continuing with this guide.</p>"},{"location":"Creating%20addons%20for%20Nanoshell/using_nslib/#brief-summary","title":"Brief Summary","text":"<p>The Nanoshell Library (<code>bin/nanoshell_lib.py</code>) stores key information about the Nanoshell environment, such as the current version, system platform, and the number of installed addons and scripts. </p>"},{"location":"Creating%20addons%20for%20Nanoshell/using_nslib/#importing-the-library","title":"Importing the Library","text":"<p>To use the functionalities provided by the Library, you'll need to import them into your addon scripts.</p> <p>Access the Nanoshell Library by simply importing the variables you need from <code>nanoshell_lib.py</code> like this:</p> <pre><code>from bin.nanoshell_lib import versionStr, systemPlatform\n</code></pre> <p>By importing this library, you can now use the provided variables in your addon to create a more integrated experience.</p> <p>Tip</p> <p>It is a good practice to only import the functions or/and variables you need from the library instead of importing all of them, most of which you won't use anyway.</p>"},{"location":"Creating%20addons%20for%20Nanoshell/using_nslib/#the-nanoshell-library-nanoshell_libpy","title":"The Nanoshell Library (<code>nanoshell_lib.py</code>)","text":"<p>The Nanoshell Library is a collection of variables that provide crucial information about the Nanoshell environment. It is located in the <code>bin/</code> directory and can be imported into your addons to access this data.</p>"},{"location":"Creating%20addons%20for%20Nanoshell/using_nslib/#available-variables","title":"Available Variables","text":"<ul> <li><code>versionStr</code>: A string representing the current version of Nanoshell.</li> <li><code>systemPlatform</code>: The platform on which Nanoshell is running (<code>win</code>, <code>linux</code>, <code>darwin</code>).</li> <li><code>addonCount</code>: The total number of addons installed.</li> <li><code>addonScriptCount</code>: The total number of addon scripts available.</li> <li><code>linuxDistroName</code>: If the system is running Linux, this will be the distro name (e.g. <code>arch</code>). Otherwise, it will be <code>Unavailable</code>.</li> </ul>"},{"location":"Creating%20addons%20for%20Nanoshell/using_nslib/#example-usage","title":"Example Usage","text":"<p>To use the Nanoshell Library in your addon, import the variables you need and utilize them in your functions.</p> <pre><code>from bin.nanoshell_lib import systemPlatform, versionStr\n\ndef addonMain(prompt):\n    print(f\"Nanoshell Version: {versionStr}\")\n    print(f\"System Platform: {systemPlatform}\")\n</code></pre> Example output<pre><code>Nanoshell Version: 0.1.5\nSystem Platform: linux\n</code></pre>"},{"location":"Creating%20addons%20for%20Nanoshell/using_nslib/#best-practices","title":"Best Practices","text":"<ul> <li>Leverage Existing Data: Instead of re-implementing functionality that the Nanoshell Library already provides, use the existing variables to simplify your code. For instance, use <code>systemPlatform</code> from the Nanoshell Library instead of writing your own platform detection code.</li> </ul>"},{"location":"Creating%20addons%20for%20Nanoshell/using_nslib/#updating-and-reloading","title":"Updating and Reloading","text":"<p>Remember that the Nanoshell Library is updated only at startup or when Nanoshell is reloaded using the <code>reload</code> command. If a user installs new addons, they will be prompted to reload Nanoshell to apply these changes.</p>"}]}